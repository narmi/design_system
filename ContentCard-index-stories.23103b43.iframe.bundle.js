"use strict";(self.webpackChunk_narmi_design_system=self.webpackChunk_narmi_design_system||[]).push([[4227],{"./src/ContentCard/index.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Overview:()=>Overview,SelectableCard:()=>SelectableCard,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js");var react=__webpack_require__("./node_modules/react/index.js"),classcat=__webpack_require__("./node_modules/classcat/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ContentCard=_ref=>{let{kind="plain",paddingSize="l",onClick=()=>{},isSelected=!1,children,testId,radiusSize="s"}=_ref;const isInteractive="interactive"===kind;return(0,jsx_runtime.jsx)("div",{"data-testid":testId||"ndsContentCard",role:isInteractive?"button":void 0,tabIndex:isInteractive?"0":void 0,"aria-pressed":isInteractive?isSelected:void 0,onClick:isInteractive?onClick:void 0,onKeyUp:isInteractive?_ref2=>{let{key}=_ref2;"Enter"===key&&onClick()}:void 0,className:(0,classcat.A)(["nds-contentCard","nds-contentCard--".concat(kind),"padding--all--".concat(paddingSize),"rounded--all--".concat(radiusSize," bgColor--white"),{"button--reset":isInteractive}]),children})};ContentCard.displayName="ContentCard",ContentCard.propTypes={children:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().arrayOf(prop_types_default().node)]).isRequired,paddingSize:prop_types_default().oneOf(["xs","s","m","l","xl","none"]),kind:prop_types_default().oneOf(["plain","elevated","interactive","bordered"]),radiusSize:prop_types_default().oneOf(["s","m","l"]),onClick:(props,propName)=>{const isInteractive="interactive"===props.type;return isInteractive&&"function"!=typeof props[propName]?new Error("ContentCard: `onClick` must be a function"):isInteractive&&void 0===props[propName]?new Error("ContentCard: `onClick` is required for `interactive` type"):"function"!=props[propName]||isInteractive?void 0:new Error("ContentCard: `onClick` is only valid for `interactive` type")},isSelected:prop_types_default().bool,testId:prop_types_default().string},ContentCard.__docgenInfo={description:"Narmi style content containers, with support for rendering as an interactive button.",methods:[],displayName:"ContentCard",props:{kind:{defaultValue:{value:'"plain"',computed:!1},description:"Kind of card to render.\n\n`plain`: flat, rounded rect\n\n`elevated`: rounded rect with shadow\n\n`interactive`: rounded rect with border, hover styles, and click handler\n\n`bordered`: flat, rounded rect with border",type:{name:"enum",value:[{value:'"plain"',computed:!1},{value:'"elevated"',computed:!1},{value:'"interactive"',computed:!1},{value:'"bordered"',computed:!1}]},required:!1},paddingSize:{defaultValue:{value:'"l"',computed:!1},description:"Amount of padding to add on all sides of card.\nFor custom padding control, use `none` and compose your own element(s)\nin ContentCard children.",type:{name:"enum",value:[{value:'"xs"',computed:!1},{value:'"s"',computed:!1},{value:'"m"',computed:!1},{value:'"l"',computed:!1},{value:'"xl"',computed:!1},{value:'"none"',computed:!1}]},required:!1},onClick:{defaultValue:{value:"() => {}",computed:!1},description:"Only valid for `interactive` card type.\nCallback for card click event.",type:{name:"custom",raw:'(props, propName) => {\n  const isInteractive = props.type === "interactive";\n  // must be a function\n  if (isInteractive && typeof props[propName] != "function") {\n    return new Error("ContentCard: `onClick` must be a function");\n  }\n  // onClick required for `interactive` type\n  if (isInteractive && props[propName] === undefined) {\n    return new Error(\n      "ContentCard: `onClick` is required for `interactive` type"\n    );\n  }\n  // onClick invalid for non-interactive types\n  if (props[propName] == "function" && !isInteractive) {\n    return new Error(\n      "ContentCard: `onClick` is only valid for `interactive` type"\n    );\n  }\n}'},required:!1},isSelected:{defaultValue:{value:"false",computed:!1},description:"Only applicable for `interactive` type.\nRenders card in visually selected state with appropriate attributes.",type:{name:"bool"},required:!1},radiusSize:{defaultValue:{value:'"s"',computed:!1},description:"Amount of border radius to add on all sides of card.",type:{name:"enum",value:[{value:'"s"',computed:!1},{value:'"m"',computed:!1},{value:'"l"',computed:!1}]},required:!1},children:{description:"Accepts any content as children",type:{name:"union",value:[{name:"node"},{name:"arrayOf",value:{name:"node"}}]},required:!0},testId:{description:"Optional value for `data-testid` attribute",type:{name:"string"},required:!1}}};const src_ContentCard=ContentCard;var _Overview$parameters,_Overview$parameters2,_SelectableCard$param,_SelectableCard$param2;const Template=args=>(0,jsx_runtime.jsx)("div",{className:"bgColor--snowGrey alignChild--center--center padding--all--xl",children:(0,jsx_runtime.jsx)(src_ContentCard,{...args})});Template.displayName="Template";const Overview=Template.bind({});Overview.args={children:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("h3",{className:"fontSize--heading4 padding--bottom--s",children:"Anything can go in here"}),(0,jsx_runtime.jsx)("div",{children:"The card will grow to fit the width of its parent container"})]})};const SelectableCard=()=>{const[isCardSelected,setIsCardSelected]=(0,react.useState)(!1);return(0,jsx_runtime.jsxs)(src_ContentCard,{kind:"interactive",onClick:()=>{setIsCardSelected((isCardSelected=>!isCardSelected))},isSelected:isCardSelected,children:[(0,jsx_runtime.jsx)("h3",{className:"fontSize--heading4 padding--bottom--xs",children:"Selectable card"}),(0,jsx_runtime.jsxs)("div",{className:"fontSize--s fontColor--secondary",children:["This card is currently"," ",(0,jsx_runtime.jsx)("em",{children:isCardSelected?"selected":"not selected"})]})]})};SelectableCard.displayName="SelectableCard",SelectableCard.parameters={docs:{description:{story:"Cards of kind `interactive` support a selected state that can be controlled with the `isSelected` prop."}}};const index_stories={title:"Components/ContentCard",component:src_ContentCard,argTypes:{type:{table:{disable:!0}}}};Overview.parameters={...Overview.parameters,docs:{...null===(_Overview$parameters=Overview.parameters)||void 0===_Overview$parameters?void 0:_Overview$parameters.docs,source:{originalSource:'args => <div className="bgColor--snowGrey alignChild--center--center padding--all--xl">\n    <ContentCard {...args} />\n  </div>',...null===(_Overview$parameters2=Overview.parameters)||void 0===_Overview$parameters2||null===(_Overview$parameters2=_Overview$parameters2.docs)||void 0===_Overview$parameters2?void 0:_Overview$parameters2.source}}},SelectableCard.parameters={...SelectableCard.parameters,docs:{...null===(_SelectableCard$param=SelectableCard.parameters)||void 0===_SelectableCard$param?void 0:_SelectableCard$param.docs,source:{originalSource:'() => {\n  const [isCardSelected, setIsCardSelected] = useState(false);\n  const handleClick = () => {\n    setIsCardSelected(isCardSelected => !isCardSelected);\n  };\n  return <ContentCard kind="interactive" onClick={handleClick} isSelected={isCardSelected}>\n      <h3 className="fontSize--heading4 padding--bottom--xs">\n        Selectable card\n      </h3>\n      <div className="fontSize--s fontColor--secondary">\n        This card is currently{" "}\n        <em>{isCardSelected ? "selected" : "not selected"}</em>\n      </div>\n    </ContentCard>;\n}',...null===(_SelectableCard$param2=SelectableCard.parameters)||void 0===_SelectableCard$param2||null===(_SelectableCard$param2=_SelectableCard$param2.docs)||void 0===_SelectableCard$param2?void 0:_SelectableCard$param2.source}}};const __namedExportsOrder=["Overview","SelectableCard"];SelectableCard.__docgenInfo={description:"",methods:[],displayName:"SelectableCard"}},"./node_modules/classcat/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function cc(names){if("string"==typeof names||"number"==typeof names)return""+names;let out="";if(Array.isArray(names))for(let tmp,i=0;i<names.length;i++)""!==(tmp=cc(names[i]))&&(out+=(out&&" ")+tmp);else for(let k in names)names[k]&&(out+=(out&&" ")+k);return out}__webpack_require__.d(__webpack_exports__,{A:()=>cc})}}]);