"use strict";(self.webpackChunk_narmi_design_system=self.webpackChunk_narmi_design_system||[]).push([[4227],{"./src/ContentCard/index.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ButtonCard:()=>ButtonCard,Overview:()=>Overview,ToggleCard:()=>ToggleCard,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/ContentCard/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Template=args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{className:"bgColor--snowGrey alignChild--center--center padding--all--xl",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{...args})});Template.displayName="Template";const Overview=Template.bind({});Overview.args={children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h3",{className:"fontSize--heading4 padding--bottom--s",children:"Anything can go in here"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{children:"The card will grow to fit the width of its parent container"})]})};const ButtonCard=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.A,{kind:"button",onClick:()=>{alert("button card clicked")},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h3",{className:"fontSize--heading4 padding--bottom--xs",children:"Button card"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"fontSize--s fontColor--secondary",children:["This card behaves like an html ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("code",{children:"button"}),"."]})]});ButtonCard.displayName="ButtonCard",ButtonCard.parameters={docs:{description:{story:"Cards of kind `toggle` support a selected state that can be controlled with the `isSelected` prop."}}};const ToggleCard=()=>{const[isCardSelected,setIsCardSelected]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(___WEBPACK_IMPORTED_MODULE_1__.A,{kind:"toggle",onClick:()=>{setIsCardSelected((isCardSelected=>!isCardSelected))},isSelected:isCardSelected,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h3",{className:"fontSize--heading4 padding--bottom--xs",children:"Toggle card"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"fontSize--s fontColor--secondary",children:["This card is currently"," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("em",{children:isCardSelected?"selected":"not selected"})]})]})};ToggleCard.displayName="ToggleCard",ToggleCard.parameters={docs:{description:{story:"Cards of kind `toggle` support a selected state that can be controlled with the `isSelected` prop."}}};const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ContentCard",component:___WEBPACK_IMPORTED_MODULE_1__.A,argTypes:{type:{table:{disable:!0}}}};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'args => <div className="bgColor--snowGrey alignChild--center--center padding--all--xl">\n    <ContentCard {...args} />\n  </div>',...Overview.parameters?.docs?.source}}},ButtonCard.parameters={...ButtonCard.parameters,docs:{...ButtonCard.parameters?.docs,source:{originalSource:'() => <ContentCard kind="button" onClick={() => {\n  alert("button card clicked");\n}}>\n    <h3 className="fontSize--heading4 padding--bottom--xs">Button card</h3>\n    <div className="fontSize--s fontColor--secondary">\n      This card behaves like an html <code>button</code>.\n    </div>\n  </ContentCard>',...ButtonCard.parameters?.docs?.source}}},ToggleCard.parameters={...ToggleCard.parameters,docs:{...ToggleCard.parameters?.docs,source:{originalSource:'() => {\n  const [isCardSelected, setIsCardSelected] = useState(false);\n  const handleClick = () => {\n    setIsCardSelected(isCardSelected => !isCardSelected);\n  };\n  return <ContentCard kind="toggle" onClick={handleClick} isSelected={isCardSelected}>\n      <h3 className="fontSize--heading4 padding--bottom--xs">Toggle card</h3>\n      <div className="fontSize--s fontColor--secondary">\n        This card is currently{" "}\n        <em>{isCardSelected ? "selected" : "not selected"}</em>\n      </div>\n    </ContentCard>;\n}',...ToggleCard.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","ButtonCard","ToggleCard"]},"./src/ContentCard/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var classcat__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/classcat/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/react/jsx-runtime.js"));const ContentCard=_ref=>{let{kind="plain",paddingSize="l",onClick=()=>{},isSelected=!1,children,testId,radiusSize="s"}=_ref;const isInteractive=["interactive","toggle","button"].some((interactiveKinds=>kind===interactiveKinds)),isToggle=isInteractive&&"button"!==kind;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{"data-testid":testId||"ndsContentCard",className:(0,classcat__WEBPACK_IMPORTED_MODULE_2__.A)(["nds-contentCard",`nds-contentCard--${kind}`,`padding--all--${paddingSize}`,`rounded--all--${radiusSize} bgColor--white`,{"button--reset":isInteractive}]),...(()=>{let props={};return isInteractive&&(props.role="button",props.onClick=onClick,props.tabIndex="0",props.onKeyUp=_ref2=>{let{key}=_ref2;"Enter"!==key&&" "!==key||onClick()}),isToggle&&(props["aria-pressed"]=isSelected),props})(),children})};ContentCard.displayName="ContentCard",ContentCard.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default().node,prop_types__WEBPACK_IMPORTED_MODULE_3___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3___default().node)]).isRequired,paddingSize:prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["xs","s","m","l","xl","none"]),kind:prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["plain","elevated","toggle","button","bordered"]),radiusSize:prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["s","m","l"]),onClick:(props,propName)=>{const isInteractive=["interactive","toggle","button"].some((kind=>kind===props.kind));return isInteractive&&"function"!=typeof props[propName]?new Error("ContentCard: `onClick` must be a function"):isInteractive&&void 0===props[propName]?new Error("ContentCard: `onClick` is required for `interactive` type"):"function"!=props[propName]||isInteractive?void 0:new Error("ContentCard: `onClick` is only valid for `toggle` and `button` types")},isSelected:prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool,testId:prop_types__WEBPACK_IMPORTED_MODULE_3___default().string};const __WEBPACK_DEFAULT_EXPORT__=ContentCard;ContentCard.__docgenInfo={description:"Narmi style content containers, with support for rendering as an interactive button.",methods:[],displayName:"ContentCard",props:{kind:{defaultValue:{value:'"plain"',computed:!1},description:"Kind of card to render.\n\n`plain`: flat, rounded rect\n\n`elevated`: rounded rect with shadow\n\n`toggle`: toggle button (checkbox-like)\n\n`button`: action button (button-like)\n\n`bordered`: flat, rounded rect with border",type:{name:"enum",value:[{value:'"plain"',computed:!1},{value:'"elevated"',computed:!1},{value:'"toggle"',computed:!1},{value:'"button"',computed:!1},{value:'"bordered"',computed:!1}]},required:!1},paddingSize:{defaultValue:{value:'"l"',computed:!1},description:"Amount of padding to add on all sides of card.\nFor custom padding control, use `none` and compose your own element(s)\nin ContentCard children.",type:{name:"enum",value:[{value:'"xs"',computed:!1},{value:'"s"',computed:!1},{value:'"m"',computed:!1},{value:'"l"',computed:!1},{value:'"xl"',computed:!1},{value:'"none"',computed:!1}]},required:!1},onClick:{defaultValue:{value:"() => {}",computed:!1},description:"Only valid for `interactive` card type.\nCallback for card click event.",type:{name:"custom",raw:'(props, propName) => {\n  const isInteractive = ["interactive", "toggle", "button"].some(\n    (kind) => kind === props.kind,\n  );\n  // must be a function\n  if (isInteractive && typeof props[propName] != "function") {\n    return new Error("ContentCard: `onClick` must be a function");\n  }\n  // onClick required for interactive types\n  if (isInteractive && props[propName] === undefined) {\n    return new Error(\n      "ContentCard: `onClick` is required for `interactive` type",\n    );\n  }\n  // onClick invalid for non-interactive types\n  if (props[propName] == "function" && !isInteractive) {\n    return new Error(\n      "ContentCard: `onClick` is only valid for `toggle` and `button` types",\n    );\n  }\n}'},required:!1},isSelected:{defaultValue:{value:"false",computed:!1},description:"Only applicable for `toggle` type.\nRenders card in visually selected state with appropriate attributes.",type:{name:"bool"},required:!1},radiusSize:{defaultValue:{value:'"s"',computed:!1},description:"Amount of border radius to add on all sides of card.",type:{name:"enum",value:[{value:'"s"',computed:!1},{value:'"m"',computed:!1},{value:'"l"',computed:!1}]},required:!1},children:{description:"Accepts any content as children",type:{name:"union",value:[{name:"node"},{name:"arrayOf",value:{name:"node"}}]},required:!0},testId:{description:"Optional value for `data-testid` attribute",type:{name:"string"},required:!1}}}},"./node_modules/classcat/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function cc(names){if("string"==typeof names||"number"==typeof names)return""+names;let out="";if(Array.isArray(names))for(let tmp,i=0;i<names.length;i++)""!==(tmp=cc(names[i]))&&(out+=(out&&" ")+tmp);else for(let k in names)names[k]&&(out+=(out&&" ")+k);return out}__webpack_require__.d(__webpack_exports__,{A:()=>cc})}}]);